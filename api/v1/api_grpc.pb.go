// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PubSubService_Publish_FullMethodName     = "/api.PubSubService/Publish"
	PubSubService_Subscribe_FullMethodName   = "/api.PubSubService/Subscribe"
	PubSubService_Unsubscribe_FullMethodName = "/api.PubSubService/Unsubscribe"
)

// PubSubServiceClient is the client API for PubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubSubServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSubService_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type pubSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubServiceClient(cc grpc.ClientConnInterface) PubSubServiceClient {
	return &pubSubServiceClient{cc}
}

func (c *pubSubServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, PubSubService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PubSubService_ServiceDesc.Streams[0], PubSubService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubSubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, PubSubService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubSubServiceServer is the server API for PubSubService service.
// All implementations should embed UnimplementedPubSubServiceServer
// for forward compatibility
type PubSubServiceServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, PubSubService_SubscribeServer) error
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
}

// UnimplementedPubSubServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPubSubServiceServer struct {
}

func (UnimplementedPubSubServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPubSubServiceServer) Subscribe(*SubscribeRequest, PubSubService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPubSubServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}

// UnsafePubSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubSubServiceServer will
// result in compilation errors.
type UnsafePubSubServiceServer interface {
	mustEmbedUnimplementedPubSubServiceServer()
}

func RegisterPubSubServiceServer(s grpc.ServiceRegistrar, srv PubSubServiceServer) {
	s.RegisterService(&PubSubService_ServiceDesc, srv)
}

func _PubSubService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubSubService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServiceServer).Subscribe(m, &pubSubServiceSubscribeServer{stream})
}

type PubSubService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pubSubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSubService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubSubService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PubSubService_ServiceDesc is the grpc.ServiceDesc for PubSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PubSubService",
	HandlerType: (*PubSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSubService_Publish_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PubSubService_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSubService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/api.proto",
}

const (
	PunchService_HostOnline_FullMethodName = "/api.PunchService/HostOnline"
	PunchService_HostQuery_FullMethodName  = "/api.PunchService/HostQuery"
	PunchService_HostUpdate_FullMethodName = "/api.PunchService/HostUpdate"
	PunchService_HostPunch_FullMethodName  = "/api.PunchService/HostPunch"
	PunchService_HostMoved_FullMethodName  = "/api.PunchService/HostMoved"
)

// PunchServiceClient is the client API for PunchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PunchServiceClient interface {
	HostOnline(ctx context.Context, in *HostOnlineRequest, opts ...grpc.CallOption) (*HostOnlineResponse, error)
	// 客户端向协调服务器查询目标客户端的地址信息
	HostQuery(ctx context.Context, in *HostQueryRequest, opts ...grpc.CallOption) (*HostQueryResponse, error)
	// 客户端向协调服务器更新自己的地址信息
	HostUpdate(ctx context.Context, in *HostUpdateRequest, opts ...grpc.CallOption) (*HostUpdateResponse, error)
	// 通知客户端进行打洞操作
	HostPunch(ctx context.Context, in *HostPunchRequest, opts ...grpc.CallOption) (*HostPunchResponse, error)
	// 通知协调服务器客户端的地址发生变化
	HostMoved(ctx context.Context, in *HostMovedRequest, opts ...grpc.CallOption) (*HostMovedResponse, error)
}

type punchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPunchServiceClient(cc grpc.ClientConnInterface) PunchServiceClient {
	return &punchServiceClient{cc}
}

func (c *punchServiceClient) HostOnline(ctx context.Context, in *HostOnlineRequest, opts ...grpc.CallOption) (*HostOnlineResponse, error) {
	out := new(HostOnlineResponse)
	err := c.cc.Invoke(ctx, PunchService_HostOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostQuery(ctx context.Context, in *HostQueryRequest, opts ...grpc.CallOption) (*HostQueryResponse, error) {
	out := new(HostQueryResponse)
	err := c.cc.Invoke(ctx, PunchService_HostQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostUpdate(ctx context.Context, in *HostUpdateRequest, opts ...grpc.CallOption) (*HostUpdateResponse, error) {
	out := new(HostUpdateResponse)
	err := c.cc.Invoke(ctx, PunchService_HostUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostPunch(ctx context.Context, in *HostPunchRequest, opts ...grpc.CallOption) (*HostPunchResponse, error) {
	out := new(HostPunchResponse)
	err := c.cc.Invoke(ctx, PunchService_HostPunch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostMoved(ctx context.Context, in *HostMovedRequest, opts ...grpc.CallOption) (*HostMovedResponse, error) {
	out := new(HostMovedResponse)
	err := c.cc.Invoke(ctx, PunchService_HostMoved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PunchServiceServer is the server API for PunchService service.
// All implementations should embed UnimplementedPunchServiceServer
// for forward compatibility
type PunchServiceServer interface {
	HostOnline(context.Context, *HostOnlineRequest) (*HostOnlineResponse, error)
	// 客户端向协调服务器查询目标客户端的地址信息
	HostQuery(context.Context, *HostQueryRequest) (*HostQueryResponse, error)
	// 客户端向协调服务器更新自己的地址信息
	HostUpdate(context.Context, *HostUpdateRequest) (*HostUpdateResponse, error)
	// 通知客户端进行打洞操作
	HostPunch(context.Context, *HostPunchRequest) (*HostPunchResponse, error)
	// 通知协调服务器客户端的地址发生变化
	HostMoved(context.Context, *HostMovedRequest) (*HostMovedResponse, error)
}

// UnimplementedPunchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPunchServiceServer struct {
}

func (UnimplementedPunchServiceServer) HostOnline(context.Context, *HostOnlineRequest) (*HostOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostOnline not implemented")
}
func (UnimplementedPunchServiceServer) HostQuery(context.Context, *HostQueryRequest) (*HostQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostQuery not implemented")
}
func (UnimplementedPunchServiceServer) HostUpdate(context.Context, *HostUpdateRequest) (*HostUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostUpdate not implemented")
}
func (UnimplementedPunchServiceServer) HostPunch(context.Context, *HostPunchRequest) (*HostPunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostPunch not implemented")
}
func (UnimplementedPunchServiceServer) HostMoved(context.Context, *HostMovedRequest) (*HostMovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostMoved not implemented")
}

// UnsafePunchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PunchServiceServer will
// result in compilation errors.
type UnsafePunchServiceServer interface {
	mustEmbedUnimplementedPunchServiceServer()
}

func RegisterPunchServiceServer(s grpc.ServiceRegistrar, srv PunchServiceServer) {
	s.RegisterService(&PunchService_ServiceDesc, srv)
}

func _PunchService_HostOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostOnline(ctx, req.(*HostOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostQuery(ctx, req.(*HostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostUpdate(ctx, req.(*HostUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostPunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostPunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostPunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostPunch(ctx, req.(*HostPunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostMoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostMovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostMoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostMoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostMoved(ctx, req.(*HostMovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PunchService_ServiceDesc is the grpc.ServiceDesc for PunchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PunchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PunchService",
	HandlerType: (*PunchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostOnline",
			Handler:    _PunchService_HostOnline_Handler,
		},
		{
			MethodName: "HostQuery",
			Handler:    _PunchService_HostQuery_Handler,
		},
		{
			MethodName: "HostUpdate",
			Handler:    _PunchService_HostUpdate_Handler,
		},
		{
			MethodName: "HostPunch",
			Handler:    _PunchService_HostPunch_Handler,
		},
		{
			MethodName: "HostMoved",
			Handler:    _PunchService_HostMoved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api.proto",
}
