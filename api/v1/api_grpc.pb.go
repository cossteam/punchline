// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PunchService_HostQuery_FullMethodName     = "/api.PunchService/HostQuery"
	PunchService_HostUpdate_FullMethodName    = "/api.PunchService/HostUpdate"
	PunchService_HostPunch_FullMethodName     = "/api.PunchService/HostPunch"
	PunchService_HostMoved_FullMethodName     = "/api.PunchService/HostMoved"
	PunchService_HostSubscribe_FullMethodName = "/api.PunchService/HostSubscribe"
)

// PunchServiceClient is the client API for PunchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PunchServiceClient interface {
	// 客户端向协调服务器查询目标客户端的地址信息
	HostQuery(ctx context.Context, in *HostQueryRequest, opts ...grpc.CallOption) (*HostQueryResponse, error)
	// 客户端向协调服务器更新自己的地址信息
	HostUpdate(ctx context.Context, in *HostUpdateRequest, opts ...grpc.CallOption) (*HostUpdateResponse, error)
	// 通知客户端进行打洞操作
	HostPunch(ctx context.Context, in *HostPunchRequest, opts ...grpc.CallOption) (*HostPunchResponse, error)
	// 通知协调服务器客户端的地址发生变化
	HostMoved(ctx context.Context, in *HostMovedRequest, opts ...grpc.CallOption) (*HostMovedResponse, error)
	// 客户端订阅另一个客户端的地址变动通知
	HostSubscribe(ctx context.Context, in *HostSubscribeRequest, opts ...grpc.CallOption) (*HostSubscribeResponse, error)
}

type punchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPunchServiceClient(cc grpc.ClientConnInterface) PunchServiceClient {
	return &punchServiceClient{cc}
}

func (c *punchServiceClient) HostQuery(ctx context.Context, in *HostQueryRequest, opts ...grpc.CallOption) (*HostQueryResponse, error) {
	out := new(HostQueryResponse)
	err := c.cc.Invoke(ctx, PunchService_HostQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostUpdate(ctx context.Context, in *HostUpdateRequest, opts ...grpc.CallOption) (*HostUpdateResponse, error) {
	out := new(HostUpdateResponse)
	err := c.cc.Invoke(ctx, PunchService_HostUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostPunch(ctx context.Context, in *HostPunchRequest, opts ...grpc.CallOption) (*HostPunchResponse, error) {
	out := new(HostPunchResponse)
	err := c.cc.Invoke(ctx, PunchService_HostPunch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostMoved(ctx context.Context, in *HostMovedRequest, opts ...grpc.CallOption) (*HostMovedResponse, error) {
	out := new(HostMovedResponse)
	err := c.cc.Invoke(ctx, PunchService_HostMoved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchServiceClient) HostSubscribe(ctx context.Context, in *HostSubscribeRequest, opts ...grpc.CallOption) (*HostSubscribeResponse, error) {
	out := new(HostSubscribeResponse)
	err := c.cc.Invoke(ctx, PunchService_HostSubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PunchServiceServer is the server API for PunchService service.
// All implementations should embed UnimplementedPunchServiceServer
// for forward compatibility
type PunchServiceServer interface {
	// 客户端向协调服务器查询目标客户端的地址信息
	HostQuery(context.Context, *HostQueryRequest) (*HostQueryResponse, error)
	// 客户端向协调服务器更新自己的地址信息
	HostUpdate(context.Context, *HostUpdateRequest) (*HostUpdateResponse, error)
	// 通知客户端进行打洞操作
	HostPunch(context.Context, *HostPunchRequest) (*HostPunchResponse, error)
	// 通知协调服务器客户端的地址发生变化
	HostMoved(context.Context, *HostMovedRequest) (*HostMovedResponse, error)
	// 客户端订阅另一个客户端的地址变动通知
	HostSubscribe(context.Context, *HostSubscribeRequest) (*HostSubscribeResponse, error)
}

// UnimplementedPunchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPunchServiceServer struct {
}

func (UnimplementedPunchServiceServer) HostQuery(context.Context, *HostQueryRequest) (*HostQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostQuery not implemented")
}
func (UnimplementedPunchServiceServer) HostUpdate(context.Context, *HostUpdateRequest) (*HostUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostUpdate not implemented")
}
func (UnimplementedPunchServiceServer) HostPunch(context.Context, *HostPunchRequest) (*HostPunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostPunch not implemented")
}
func (UnimplementedPunchServiceServer) HostMoved(context.Context, *HostMovedRequest) (*HostMovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostMoved not implemented")
}
func (UnimplementedPunchServiceServer) HostSubscribe(context.Context, *HostSubscribeRequest) (*HostSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostSubscribe not implemented")
}

// UnsafePunchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PunchServiceServer will
// result in compilation errors.
type UnsafePunchServiceServer interface {
	mustEmbedUnimplementedPunchServiceServer()
}

func RegisterPunchServiceServer(s grpc.ServiceRegistrar, srv PunchServiceServer) {
	s.RegisterService(&PunchService_ServiceDesc, srv)
}

func _PunchService_HostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostQuery(ctx, req.(*HostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostUpdate(ctx, req.(*HostUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostPunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostPunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostPunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostPunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostPunch(ctx, req.(*HostPunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostMoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostMovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostMoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostMoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostMoved(ctx, req.(*HostMovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchService_HostSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchServiceServer).HostSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PunchService_HostSubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchServiceServer).HostSubscribe(ctx, req.(*HostSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PunchService_ServiceDesc is the grpc.ServiceDesc for PunchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PunchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PunchService",
	HandlerType: (*PunchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostQuery",
			Handler:    _PunchService_HostQuery_Handler,
		},
		{
			MethodName: "HostUpdate",
			Handler:    _PunchService_HostUpdate_Handler,
		},
		{
			MethodName: "HostPunch",
			Handler:    _PunchService_HostPunch_Handler,
		},
		{
			MethodName: "HostMoved",
			Handler:    _PunchService_HostMoved_Handler,
		},
		{
			MethodName: "HostSubscribe",
			Handler:    _PunchService_HostSubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api.proto",
}

const (
	PublisherService_AddTopic_FullMethodName    = "/api.PublisherService/AddTopic"
	PublisherService_Publish_FullMethodName     = "/api.PublisherService/Publish"
	PublisherService_Subscribe_FullMethodName   = "/api.PublisherService/Subscribe"
	PublisherService_Unsubscribe_FullMethodName = "/api.PublisherService/Unsubscribe"
)

// PublisherServiceClient is the client API for PublisherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherServiceClient interface {
	AddTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PublisherService_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type publisherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherServiceClient(cc grpc.ClientConnInterface) PublisherServiceClient {
	return &publisherServiceClient{cc}
}

func (c *publisherServiceClient) AddTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, PublisherService_AddTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, PublisherService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PublisherService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublisherService_ServiceDesc.Streams[0], PublisherService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublisherService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type publisherServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *publisherServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publisherServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, PublisherService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServiceServer is the server API for PublisherService service.
// All implementations should embed UnimplementedPublisherServiceServer
// for forward compatibility
type PublisherServiceServer interface {
	AddTopic(context.Context, *TopicRequest) (*TopicResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, PublisherService_SubscribeServer) error
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
}

// UnimplementedPublisherServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublisherServiceServer struct {
}

func (UnimplementedPublisherServiceServer) AddTopic(context.Context, *TopicRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopic not implemented")
}
func (UnimplementedPublisherServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublisherServiceServer) Subscribe(*SubscribeRequest, PublisherService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublisherServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}

// UnsafePublisherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServiceServer will
// result in compilation errors.
type UnsafePublisherServiceServer interface {
	mustEmbedUnimplementedPublisherServiceServer()
}

func RegisterPublisherServiceServer(s grpc.ServiceRegistrar, srv PublisherServiceServer) {
	s.RegisterService(&PublisherService_ServiceDesc, srv)
}

func _PublisherService_AddTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).AddTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublisherService_AddTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).AddTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublisherService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublisherServiceServer).Subscribe(m, &publisherServiceSubscribeServer{stream})
}

type PublisherService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type publisherServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *publisherServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PublisherService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublisherService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublisherService_ServiceDesc is the grpc.ServiceDesc for PublisherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublisherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PublisherService",
	HandlerType: (*PublisherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTopic",
			Handler:    _PublisherService_AddTopic_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _PublisherService_Publish_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PublisherService_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PublisherService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/api.proto",
}
