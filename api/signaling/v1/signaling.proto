syntax = "proto3";

package punchline.signaling;
option go_package = "github.com/cossteam/punchline/api/signaling";

service Signaling {
    rpc Publish (PublishRequest) returns (PublishResponse);
    rpc Subscribe (SubscribeRequest) returns (stream Message);
}

message Message {
    string topic = 1;
    bytes data = 2;


    Candidate candidate = 3;
    Credentials credentials = 4;
}

message PublishRequest {
    string topic = 1;
    string hostname = 2;
    bytes data = 3;

    Candidate candidate = 4;
    Credentials credentials = 5;
}

message PublishResponse {}

message SubscribeRequest {
    string topic = 1;
    string hostname = 2;
}

message Credentials {
    // ICE username fragment
    string ufrag = 1;

    // ICE password
    string pwd = 2;

    // Flag to indicate that the sending peer requests the credentials of the receiving peer
    bool need_creds = 3;
}

// ICE Connection state from pion/ice/ice.go
enum ConnectionState {
    NEW = 0;           // ICE agent is gathering addresses
    CHECKING = 1;      // ICE agent has been given local and remote candidates, and is attempting to find a match
    CONNECTED = 2;     // ICE agent has a pairing, but is still checking other pairs
    COMPLETED = 3;     // ICE agent has finished
    FAILED = 4;        // ICE agent never could successfully connect
    DISCONNECTED = 5;  // ICE agent connected successfully, but has entered a failed state
    CLOSED = 6;        // ICE agent has finished and is no longer handling requests
}

// ICE Candidate types
// See: https://datatracker.ietf.org/doc/html/rfc8445#section-5.1.1
enum CandidateType {
    UNSPECIFIED_CANDIDATE_TYPE = 0;
    HOST = 1;
    SERVER_REFLEXIVE = 2;
    PEER_REFLEXIVE = 3;
    RELAY = 4;
}

enum NetworkType {
    UNSPECIFIED_NETWORK_TYPE = 0;
    UDP4 = 1;
    UDP6 = 2;
    TCP4 = 3;
    TCP6 = 4;
}

// Type of TCP candidate
// See: https://datatracker.ietf.org/doc/html/rfc6544
enum TCPType {
    UNSPECIFIED_TCP_TYPE = 0;
    // ACTIVE 主动发起连接
    ACTIVE = 1;
    // PASSIVE 监听传入连接
    PASSIVE = 2;
    // SIMULTANEOUS_OPEN 同时打开，允许双方同时发起连接
    SIMULTANEOUS_OPEN = 3;
}

enum RelayProtocol {
    UNSPECIFIED_RELAY_PROTOCOL = 0;
    UDP = 1;
    TCP = 2;
    TLS = 3;
    DTLS = 4;
}

// The Related Address conveys transport addresses related to the candidate,
// useful for diagnostics and other purposes.
// See: https://datatracker.ietf.org/doc/html/rfc8839#section-5.1
message RelatedAddress {
    string address = 1;
    int32  port = 2;
}

// An ICE Candidate contains a transport address for a candidate that can be used for connectivity checks.
// See: https://datatracker.ietf.org/doc/html/rfc8839#section-5.1
message Candidate {
    // The type of candidate
    CandidateType type = 1;

    NetworkType network_type = 2;
    TCPType tcp_type = 3;

    // An identifier that is equivalent for two candidates that are of the same type, share the same base, and come from the same STUN server.
    string foundation = 4;

    // A positive integer between 1 and 256 that identifies the specific component of the media stream for which this is a candidate.
    int32 component = 5;

    // A positive integer between 1 and (2**31 - 1).
    int32 priority = 6;

    // The IP address of the candidate.
    string address = 7;

    // The port of the candidate.
    int32 port = 8;

    // The related address conveys transport addresses related to the candidate, useful for diagnostics and other purposes.
    RelatedAddress related_address = 9;

    // The protocol used between the endpoint and the relay server.
    RelayProtocol relay_protocol = 10;
}